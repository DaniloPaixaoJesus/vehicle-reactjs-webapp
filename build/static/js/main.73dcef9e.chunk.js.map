{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","isLoaded","items","vin","getAllVehicles","_this2","fetch","then","res","json","result","console","log","vehicles","setState","data","status","newVehicles","map","v","_this3","_this$state","react_default","a","createElement","message","style","width","height","display","margin","padding","wordBreak","rel","href","integrity","crossorigin","item","Card_default","id","Body","Title","name","Subtitle","className","Text","driverLicenseCategory","driverAddress","client_default","url","topics","onMessage","updateData","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"uNAkIeA,uCArHb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,MAAO,GACPC,IAAI,IANWX,mFA2BfG,KAAKS,0DAGO,IAAAC,EAAAV,KACdW,MAAM,qFACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KACC,SAACG,GACCC,QAAQC,IAAIF,GACZL,EAAKQ,SAAWH,EAChBL,EAAKS,SAAS,CACZb,UAAU,EACVC,MAAOQ,KAMX,SAACV,GACCK,EAAKS,SAAS,CACZb,UAAU,EACVD,+CAMCe,GACTJ,QAAQC,IAAI,kBAAmBG,GAC/BJ,QAAQC,IAAI,sBAAuBG,EAAKZ,KACxCQ,QAAQC,IAAI,yBAA0BG,EAAKC,QAC3CL,QAAQC,IAAI,qBAAsBjB,KAAKI,MAAMG,OAC7C,IAAIe,EAActB,KAAKI,MAAMG,MAAMgB,IAAK,SAAAC,GAItC,OAHGA,EAAEhB,KAAOY,EAAKZ,MACfgB,EAAEH,OAASD,EAAKC,QAEXG,IAETxB,KAAKmB,SAAS,CAACZ,MAAMe,qCAGd,IAAAG,EAAAzB,KAAA0B,EACiC1B,KAAKI,MAArCC,EADDqB,EACCrB,MAAOC,EADRoB,EACQpB,SAAUC,EADlBmB,EACkBnB,MADlBmB,EACyBlB,IAChC,OAAIH,EACKsB,EAAAC,EAAAC,cAAA,qBAAaxB,EAAMyB,SAChBxB,EAIRqB,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACC,MAAO,OAAQC,OAAQ,OAAQC,QAAS,OAAQC,OAAQ,OAAQC,QAAS,OAAQC,UAAU,cACtGV,EAAAC,EAAAC,cAAA,QACES,IAAI,aACJC,KAAK,wEACLC,UAAU,0EACVC,YAAY,MAEblC,EAAMgB,IAAI,SAAAmB,GAAI,OACbf,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CAAMG,MAAO,CAAEC,MAAO,QAASG,OAAQ,MAAOC,QAAS,OAASQ,GAAIF,EAAKlC,KACvEmB,EAAAC,EAAAC,cAACc,EAAAf,EAAKiB,KAAN,KACElB,EAAAC,EAAAC,cAACc,EAAAf,EAAKkB,MAAN,KAAaJ,EAAKK,MAClBpB,EAAAC,EAAAC,cAACc,EAAAf,EAAKoB,SAAN,CAAeC,UAAU,mBAAmBP,EAAKlC,KACjDmB,EAAAC,EAAAC,cAACc,EAAAf,EAAKsB,KAAN,KACCR,EAAKrB,QAENM,EAAAC,EAAAC,cAACc,EAAAf,EAAKsB,KAAN,KACCR,EAAKS,uBAENxB,EAAAC,EAAAC,cAACc,EAAAf,EAAKsB,KAAN,KACCR,EAAKU,mBAKdzB,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,CAAc0B,IAAI,4EAA4EC,OAAQ,CAAC,iBACnGC,UAAW,SAACpC,GAEVJ,QAAQC,IAAI,cAAeG,GAE3BK,EAAKgC,WAAWrC,OAhCjBO,EAAAC,EAAAC,cAAA,gCA7EK6B,IAAMC,YCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5D,KAAK,SAAA6D,GACjCA,EAAaC,6FEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.73dcef9e.chunk.js","sourcesContent":["import React from 'react';\nimport SockJsClient from 'react-stomp';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component {\n  \n  vehicles;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: [],\n      vin:''\n    };\n  }\n\n  componentDidMount() {\n      // let socket = new SockJS('http://localhost:8085/livestatus-websocket');\n      // let stompClient = Stomp.over(socket);\n      // stompClient.connect({}, function (frame) {\n\t    //     stompClient.subscribe('/topic/status', function (data) {\n\t    //     \tvar vehicleStatus = JSON.parse(data.body);\n      //       console.log(vehicleStatus);\n      //       // const { error, isLoaded, items } = this.state;\n      //       // items.map(item => {  \n      //       //   if(scoreJson.vin == item.vin){\n      //       //     return {scoreJson}\n      //       //   }\n      //       // });\n                \n\t            \n\t    //     });\n      // });\n      this.getAllVehicles();\n  }\n\n  getAllVehicles(){\n    fetch(\"http://swedish-challenge.danilopaixao.com.br:8080/vehicle-service/api/v1/vehicles\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          console.log(result)\n          this.vehicles = result;\n          this.setState({\n            isLoaded: true,\n            items: result\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  updateData(data){\n    console.log('updateData-Vin:', data);\n    console.log('updateData-Vin.vin:', data.vin);\n    console.log('updateData-Vin.status:', data.status);\n    console.log('this.state.items=>', this.state.items)\n    let newVehicles = this.state.items.map( v => {\n      if(v.vin == data.vin){\n        v.status = data.status;\n      }\n      return v\n    });\n    this.setState({items:newVehicles});\n  }\n\n  render() {\n    const { error, isLoaded, items, vin } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div style={{width: '100%', height: '100%', display: 'flex', margin: '20px', padding: '20px', wordBreak:'break-all'}} >\n          <link\n            rel=\"stylesheet\"\n            href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n            integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n            crossorigin=\"*\"\n          />\n          {items.map(item => (\n            <Card style={{ width: '550px', margin: '5px', padding: '5px' }} id={item.vin} >\n              <Card.Body>\n                <Card.Title>{item.name}</Card.Title>\n                <Card.Subtitle className=\"mb-2 text-muted\">{item.vin}</Card.Subtitle>\n                <Card.Text>\n                {item.status}\n                </Card.Text>\n                <Card.Text>\n                {item.driverLicenseCategory}\n                </Card.Text>\n                <Card.Text>\n                {item.driverAddress}\n                </Card.Text>\n              </Card.Body>\n            </Card>\n          ))}\n        <SockJsClient url='http://ec2-35-174-0-145.compute-1.amazonaws.com:8085/livestatus-websocket' topics={['/topic/status']}\n            onMessage={(data) => { \n              //this.setState({vin:msg})\n              console.log('entrou aqui', data);\n              //var vehicleStatus = JSON.parse(data);\n              this.updateData(data)\n              \n             }}\n          />\n          </div>\n        \n      );\n    }\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}