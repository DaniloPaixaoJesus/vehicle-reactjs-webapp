{"version":3,"sources":["cards/index.js","services/cars.js","App.js","serviceWorker.js","index.js"],"names":["DefaultCard","_ref","infos","react_default","a","createElement","className","map","info","index","status","key","vin","driverName","driverLicenseCategory","driverAddress","GetAllCars","Object","asyncToGenerator","regenerator_default","mark","_callee","response","cars","wrap","_context","prev","next","fetch","headers","Access-Control-Allow-Origin","sent","json","abrupt","stop","apply","this","arguments","vehicles","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","items","owner","getAllVehicles","retorno","forEach","v","push","setState","isLoaded","data","newVehicles","e","value","target","filteredVehicles","concat","filter","toLowerCase","includes","_this2","_this$state","error","name","htmlFor","onChange","event","handleOnChangeOwner","handleOnChange","selected","cards","client_default","url","topics","onMessage","updateData","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4a03c5c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nfunction DefaultCard ({infos}){\r\n    return (\r\n        <div className=\"card-list\">\r\n            {infos && infos.map(function(info,index){\r\n                \r\n                let status = 'online'; \r\n                if(info.status == 'OFF'){\r\n                    status = 'offline';\r\n                }\r\n                \r\n                return (<div className={\"card \"+status} key={index}>\r\n                    <ul className=\"infos\">\r\n                        <li>\r\n                            <h5>VIN</h5>\r\n                            <p>{info.vin}</p>\r\n                        </li>\r\n                        <li>\r\n                            <p>{info.driverName}</p>\r\n                            <p>{info.driverLicenseCategory}</p>\r\n                            <p>{info.driverAddress}</p>\r\n                        </li>\r\n                        <li className=\"status\">\r\n                            <span>{status}</span>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DefaultCard;\r\n\r\n","\r\n\r\nconst GetAllCars = async () =>{   \r\n    \r\n\r\n    const response = await fetch(\r\n        'http://localhost:8080/vehicle-service/api/v1/vehicles',\r\n        {headers:{'Access-Control-Allow-Origin':'*'}}\r\n    );\r\n    const cars = await response.json();\r\n    return cars;\r\n}\r\n\r\nconst GetCarByVin = async (vin) =>{   \r\n    const response = await fetch(\r\n        `http://localhost:8080/vehicle-service/api/v1/vehicles/${vin}`,\r\n        {headers:{'Access-Control-Allow-Origin':'*'}}\r\n    );\r\n    const car = await response.json();\r\n    return car;\r\n}\r\n\r\nexport {GetAllCars, GetCarByVin};","import React from 'react';\r\nimport SockJsClient from 'react-stomp';\r\nimport DefaultCard from './cards';\r\nimport {GetAllCars} from '../src/services/cars';\r\nimport './App.css';\r\n\r\nvar vehicles = [];\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n      owner: ''\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n      this.getAllVehicles();\r\n  }\r\n  \r\n  async getAllVehicles(){\r\n    let retorno = await GetAllCars();\r\n    \r\n    retorno.forEach(v => {\r\n      vehicles.push(v);\r\n    });\r\n    this.setState({\r\n      isLoaded: true,\r\n      items: retorno\r\n    });\r\n  }\r\n\r\n  updateData(data){\r\n    let newVehicles = this.state.items.map( v => {\r\n      if(v.vin == data.vin){\r\n        v.status = data.status;\r\n      }\r\n      return v\r\n    });\r\n    this.setState({items:newVehicles});\r\n  }\r\n\r\n  handleOnChange(e){\r\n    const value = e.target.value;\r\n    let vehiclesTmp = [...vehicles];\r\n    let filteredVehicles = vehiclesTmp.filter( v => {\r\n      if(value == 'TODOS'){\r\n        return v\r\n      }else if(v.status === value){\r\n        return v\r\n      }\r\n    });\r\n    this.setState({items:filteredVehicles});\r\n    \r\n  }\r\n\r\n  handleOnChangeOwner(e){\r\n    const value = e.target.value;\r\n    let vehiclesTmp = [...vehicles];\r\n    let filteredVehicles = vehiclesTmp.filter( v => {\r\n      if(value == ''){\r\n        return v\r\n      }else if(v.driverName.toLowerCase().includes(value.toLowerCase())){\r\n        return v\r\n      }\r\n    });\r\n    this.setState({items:filteredVehicles});\r\n  }\r\n\r\n  render() {\r\n    const { error, isLoaded, items, vin } = this.state;\r\n    return <div className=\"App\">\r\n      <header className=\"App-header\">\r\n          <div className=\"container\">\r\n              <form name=\"car-filter\" className=\"car-filter\">\r\n                  <div className=\"group\">\r\n                      <label htmlFor =\"owner\">Owner: </label>\r\n                      {/* <input name=\"owner\" /> */}\r\n                      <input name=\"owner\" onChange={(event) => this.handleOnChangeOwner(event)} />\r\n                  </div>                \r\n                  <div className=\"group\">\r\n                      <label htmlFor =\"status\">Status: </label>\r\n                      <select name=\"status\" onChange={(event) => this.handleOnChange(event)}   >\r\n                          <option value=\"TODOS\" selected>TODOS</option>\r\n                          <option value=\"OFF\">OFFLINE</option>\r\n                          <option value=\"ON\">ONLINE</option>\r\n                      </select>\r\n                  </div>                \r\n              </form>\r\n          </div>\r\n      </header>\r\n      <section className=\"car-infos\">\r\n          <div className=\"container\">\r\n              <DefaultCard infos={items} />\r\n            </div>                  \r\n      </section>\r\n      <SockJsClient url='http://localhost:8085/livestatus-websocket' topics={['/topic/status']}\r\n            onMessage={(data) => { \r\n              this.updateData(data)\r\n             }}\r\n          />\r\n    </div>\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}