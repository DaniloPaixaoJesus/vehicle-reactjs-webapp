{"version":3,"sources":["cards/index.js","services/cars.js","App.js","screens/MapView.js","serviceWorker.js","index.js"],"names":["DefaultCard","_ref","infos","react_default","a","createElement","className","map","info","index","status","key","vin","name","regNumber","GetAllCars","Object","asyncToGenerator","regenerator_default","mark","_callee","response","cars","wrap","_context","prev","next","fetch","process","headers","Access-Control-Allow-Origin","sent","json","abrupt","vehicleList","stop","apply","this","arguments","vehicles","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","items","owner","getAllVehicles","retorno","forEach","v","push","setState","isLoaded","data","newVehicles","e","value","target","filteredVehicles","concat","filter","driverName","toLowerCase","includes","_this2","_this$state","error","react_router_dom","to","htmlFor","onChange","event","handleOnChangeOwner","handleOnChange","defaultValue","cards","client_default","url","topics","onMessage","updateData","React","Component","MapView","_Component","displayMarkers","console","log","dist","id","position","lat","latitude","lng","longitude","onClick","inherits","createClass","_getAllVehicles","vehiclesTmp","vehiclesTmpArr","geolocation","Array","from","google","zoom","style","mapStyles","initialCenter","width","height","GoogleApiWrapper","apiKey","Boolean","window","location","hostname","match","ReactDOM","render","react_router","path","exact","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a44c61f2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nfunction DefaultCard ({infos}){\r\n    return (\r\n        <div className=\"card-list\">\r\n            {infos && infos.map(function(info,index){\r\n                \r\n                let status = 'online'; \r\n                if(info.status === 'OFF'){\r\n                    status = 'offline';\r\n                }\r\n                \r\n                return (<div className={\"card \"+status} key={index}>\r\n                    <ul className=\"infos\">\r\n                        <li>\r\n                            <h5>VIN</h5>\r\n                            <p>{info.vin}</p>\r\n                        </li>\r\n                        <li>\r\n                            <p>{info.name}</p>\r\n                            <p>{info.regNumber}</p>\r\n                        </li>\r\n                        <li className=\"status\">\r\n                            <span>{status}</span>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DefaultCard;\r\n\r\n","\r\n\r\nconst GetAllCars = async () =>{   \r\n    \r\n\r\n    const response = await fetch(\r\n        process.env.REACT_APP_API_VEHICLES_ENDPOINT,\r\n        {headers:{'Access-Control-Allow-Origin':'*'}}\r\n    );\r\n    const cars = await response.json();\r\n    return cars.vehicleList;\r\n}\r\n\r\nconst GetCarByVin = async (vin) =>{   \r\n    const response = await fetch(\r\n        `${process.env.REACT_APP_API_VEHICLES_ENDPOINT}/${vin}`,\r\n        {headers:{'Access-Control-Allow-Origin':'*'}}\r\n    );\r\n    const car = await response.json();\r\n    return car;\r\n}\r\n\r\nexport {GetAllCars, GetCarByVin};","import React from 'react';\r\nimport SockJsClient from 'react-stomp';\r\nimport DefaultCard from './cards';\r\nimport {GetAllCars} from '../src/services/cars';\r\nimport { Link } from 'react-router-dom'\r\nimport './App.css';\r\n\r\nvar vehicles = [];\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n      owner: ''\r\n    };\r\n  }\r\n\r\n  //componentDidMount() {\r\n  componentWillMount(){\r\n      this.getAllVehicles();\r\n  }\r\n  \r\n  async getAllVehicles(){\r\n    let retorno = await GetAllCars();\r\n    \r\n    retorno.forEach(v => {\r\n      vehicles.push(v);\r\n    });\r\n    this.setState({\r\n      isLoaded: true,\r\n      items: retorno\r\n    });\r\n  }\r\n\r\n  updateData(data){\r\n    let newVehicles = this.state.items.map( v => {\r\n      if(v.vin == data.vin){\r\n        v.status = data.status;\r\n      }\r\n      return v\r\n    });\r\n    this.setState({items:newVehicles});\r\n  }\r\n\r\n  handleOnChange(e){\r\n    const value = e.target.value;\r\n    let vehiclesTmp = [...vehicles];\r\n    let filteredVehicles = vehiclesTmp.filter( v => {\r\n      if(value == 'TODOS'){\r\n        return v\r\n      }else if(v.status === value){\r\n        return v\r\n      }\r\n    });\r\n    this.setState({items:filteredVehicles});\r\n    \r\n  }\r\n\r\n  handleOnChangeOwner(e){\r\n    const value = e.target.value;\r\n    let vehiclesTmp = [...vehicles];\r\n    let filteredVehicles = vehiclesTmp.filter( v => {\r\n      if(value == ''){\r\n        return v\r\n      }else if(v.driverName.toLowerCase().includes(value.toLowerCase())){\r\n        return v\r\n      }\r\n    });\r\n    this.setState({items:filteredVehicles});\r\n  }\r\n\r\n  render() {\r\n    const { error, isLoaded, items, vin } = this.state;\r\n    return <div className=\"App\">\r\n      <header className=\"App-header\">\r\n          <div className=\"container\">\r\n              \r\n              <form name=\"car-filter\" className=\"car-filter\">\r\n              <div className=\"MapView-button\"><Link to=\"/map\">MapView</Link></div>\r\n                  <div className=\"group\">\r\n                      <label htmlFor =\"owner\">Owner: </label>\r\n                      {/* <input name=\"owner\" /> */}\r\n                      <input name=\"owner\" onChange={(event) => this.handleOnChangeOwner(event)} />\r\n                  </div>                \r\n                  <div className=\"group\">\r\n                      <label htmlFor =\"status\">Status: </label>\r\n                      <select name=\"status\" onChange={(event) => this.handleOnChange(event)}   >\r\n                          <option value=\"TODOS\" defaultValue>TODOS</option>\r\n                          <option value=\"OFF\">OFFLINE</option>\r\n                          <option value=\"ON\">ONLINE</option>\r\n                      </select>\r\n                  </div>                \r\n              </form>\r\n          </div>\r\n      </header>\r\n      <section className=\"car-infos\">\r\n          <div className=\"container\">\r\n              <DefaultCard infos={items} />\r\n            </div>                  \r\n      </section>\r\n      <SockJsClient url={process.env.REACT_APP_WEB_SOCKET_ENDPOINT} \r\n            topics={[process.env.REACT_APP_WEB_SOCKET_TOPIC]}\r\n            onMessage={(data) => { \r\n              this.updateData(data)\r\n             }}\r\n          />\r\n    </div>\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\nimport SockJsClient from 'react-stomp';\r\nimport { Link } from 'react-router-dom'\r\nimport {GetAllCars} from '../services/cars'\r\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\r\nimport './MapView.css';\r\n\r\nexport class MapView extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n  \r\n      /*this.state = {\r\n        vehicles: []\r\n      }*/\r\n      this.state = {\r\n        vehicles: []\r\n      }\r\n    }\r\n  \r\n    displayMarkers = () => {\r\n      return this.state.vehicles.map((v, index) => {\r\n        console.log('displayMarkers=>', v)\r\n        return <Marker key={index} id={index} position={{\r\n            lat: v.latitude,\r\n            lng: v.longitude\r\n       }}\r\n       onClick={() => console.log(\"You clicked me!=>\", v.vin)} />\r\n      })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getAllVehicles();\r\n    }\r\n\r\n    async getAllVehicles(){\r\n        let retorno = await GetAllCars();\r\n        let vehiclesTmp = retorno.map((v, index) => {\r\n          return {\r\n            vin: v.vin,\r\n            latitude: v.geolocation.latitude,\r\n            longitude: v.geolocation.longitude\r\n         }\r\n        });\r\n        let vehiclesTmpArr = Array.from(vehiclesTmp);\r\n        //console.log(vehiclesTmpArr);\r\n        this.setState({\r\n          vehicles: vehiclesTmpArr\r\n          });\r\n        /*this.setState({\r\n            vehicles: [\r\n                        {latitude: -23.492797, longitude: -46.851263},\r\n                        {latitude: -23.500549, longitude: -46.841415}\r\n                    ]\r\n            });*/\r\n    }\r\n\r\n    updateData(data){\r\n      let newVehicles = this.state.vehicles.map( v => {\r\n        console.log(v);\r\n        if(v.vin == data.vin){\r\n          v.latitude = data.geolocation.latitude;\r\n          v.longitude = data.geolocation.longitude;\r\n        }\r\n        return v\r\n      });\r\n      this.setState({vehicles:newVehicles});\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div className=\"MapView\">\r\n            <header className=\"MapView-header\">\r\n                <div className=\"MapView-menu\">\r\n                    <Link to=\"/\">Back to List View</Link>\r\n                </div>\r\n            </header>\r\n            <Map\r\n                google={this.props.google}\r\n                zoom={12}\r\n                style={mapStyles}\r\n                initialCenter={{ lat: -23.508956, lng: -46.832757}}\r\n            >\r\n                {this.displayMarkers()}\r\n            </Map>\r\n            <SockJsClient url={process.env.REACT_APP_WEB_SOCKET_ENDPOINT} \r\n            topics={[process.env.REACT_APP_WEB_SOCKET_TOPIC]}\r\n            onMessage={(data) => { \r\n              this.updateData(data)\r\n             }}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nconst mapStyles = {\r\n    width: '100%',\r\n    height: '100%',\r\n  };\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\r\n})(MapView);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport MapView from './screens/MapView';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\r\n\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Switch>\r\n            <Route path=\"/\" exact={true} component={App} />\r\n            <Route path=\"/map\" component={MapView} />\r\n        </Switch>\r\n    </ BrowserRouter>\r\n    , document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}